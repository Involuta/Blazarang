[gd_scene load_steps=18 format=3 uid="uid://b2vpcjrj8fxwk"]

[ext_resource type="PackedScene" uid="uid://b7dblthtlyn0r" path="res://glb_inherited_scenes/arc.tscn" id="1_ko5fr"]
[ext_resource type="Shader" path="res://GPUTrail-main/shaders/trail.gdshader" id="2_k1lcd"]
[ext_resource type="Script" path="res://GPUTrail-main/GPUTrail3D.gd" id="5_hpq5l"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_xhio8"]
shader = ExtResource("2_k1lcd")

[sub_resource type="Shader" id="Shader_xt3am"]
code = "shader_type spatial;

render_mode unshaded,world_vertex_coords,cull_disabled;

uniform sampler2D tex : repeat_disable, source_color, hint_default_white;
uniform sampler2D color_ramp : repeat_disable, source_color, hint_default_white;
uniform sampler2D curve : repeat_disable, hint_default_white;
uniform mat4 emmission_transform = mat4(1);
uniform int flags = 0;
/*uniform bool vertical_texture = false;
uniform bool use_red_as_alpha = false;
uniform bool billboard = false;
uniform bool dewiggle = false;
uniform bool snap_to_transform = false;*/

#define vertical_texture  bool(flags & 1)
#define use_red_as_alpha  bool(flags & 2)
#define billboard		  bool(flags & 4)
#define dewiggle 		  bool(flags & 8)
#define snap_to_transform bool(flags & 16)
#define clip_overlaps bool(flags & 32)


varying float scale_interp;
varying vec2 clip;
varying vec2 mesh_uv;
void vertex(){
	mesh_uv = UV;
	
	mat4 my_model_matrix = MODEL_MATRIX;
	if(snap_to_transform && INSTANCE_CUSTOM.w==2.0){
		my_model_matrix[1] = emmission_transform * vec4(0,1,0,1);
		my_model_matrix[2] = emmission_transform * vec4(0,-1,0,1);
	}
	
	if(billboard){
		vec3 t0 = my_model_matrix[0].xyz-my_model_matrix[3].xyz;
		vec3 t1 = my_model_matrix[1].xyz-my_model_matrix[2].xyz;
		
		//vec3 up1 = up0;
		vec3 up0 = length(t0)*normalize(
			cross(
				my_model_matrix[3].xyz-INV_VIEW_MATRIX[3].xyz,
				//-INV_VIEW_MATRIX[2].xyz,
				t0));
		vec3 up1 = length(t1)*normalize(
			cross(
				my_model_matrix[2].xyz-INV_VIEW_MATRIX[3].xyz,
				//-INV_VIEW_MATRIX[2].xyz,
				t1));
		
		my_model_matrix[0] = my_model_matrix[3];
		my_model_matrix[1] = my_model_matrix[2];
		
		my_model_matrix[0].xyz += up0;
		my_model_matrix[3].xyz -= up0;
		
		my_model_matrix[1].xyz += up1;
		my_model_matrix[2].xyz -= up1;
	}
	
	vec3 a = mix(my_model_matrix[1].xyz,my_model_matrix[0].xyz,UV.x);
	vec3 b = mix(my_model_matrix[2].xyz,my_model_matrix[3].xyz,UV.x);

	UV.x = (UV.x + INSTANCE_CUSTOM.w-1.0 - 2.0)/(INSTANCE_CUSTOM.z-1.0);

	
	float h = textureLod(curve, vec2(UV.x), 0.0).x;//h=1.0;
	
	VERTEX = mix(a,b,(UV.y-0.5)*h + 0.5);

	if(dewiggle){
		scale_interp = h;
		UV *= scale_interp;
	}
	
		
	clip.x = dot(VERTEX - INV_VIEW_MATRIX[3].xyz,cross(my_model_matrix[1].xyz - INV_VIEW_MATRIX[3].xyz,my_model_matrix[2].xyz - INV_VIEW_MATRIX[3].xyz));
	clip.y = dot(VERTEX - INV_VIEW_MATRIX[3].xyz,cross(my_model_matrix[3].xyz - INV_VIEW_MATRIX[3].xyz,my_model_matrix[0].xyz - INV_VIEW_MATRIX[3].xyz));
}

void fragment(){
	//if(billboard && !FRONT_FACING) discard;
	
	vec2 clip0 = clip;
	float ababab = clip0.x*clip0.y;
	//ababab += dFdx(ababab) + dFdy(ababab);
	//clip0 -= fwidth(clip0);
	if(clip_overlaps && ababab < 0.0) { 
		
		
		
		if(abs(mesh_uv.x-0.5)<0.5)
			discard;
	}
	
	vec2 base_uv = UV;

	if(dewiggle){
		base_uv /= scale_interp;
	}
	
	vec2 raw_uv = base_uv;

	if(vertical_texture){
		base_uv = base_uv.yx;
	}
	
	vec4 T = textureLod(tex, base_uv, 0.0);
	ALBEDO = T.rgb;
	ALPHA = T.a;
	
	if(use_red_as_alpha){
		ALBEDO = vec3(1);
		ALPHA = T.r;
	}
	
	T = textureLod(color_ramp, raw_uv, 0.0);
	ALBEDO *= T.rgb;
	ALPHA *= T.a;
	
	//ALBEDO = vec3(UV,0);
	
	if((base_uv.x < .01) || (.99 < base_uv.x)){
		//ALBEDO = vec3(1,0,1);
	}
}"

[sub_resource type="Gradient" id="Gradient_03v0c"]
offsets = PackedFloat32Array(0, 0.907193)
colors = PackedColorArray(1, 1, 1, 1, 1, 0, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_jippm"]
gradient = SubResource("Gradient_03v0c")

[sub_resource type="Curve" id="Curve_asxjb"]
_data = [Vector2(0, 1), 0.0, -1.18082, 0, 0, Vector2(1, 0.0129609), -0.943115, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_vxgg4"]
width = 32
curve = SubResource("Curve_asxjb")

[sub_resource type="Gradient" id="Gradient_lgot7"]
offsets = PackedFloat32Array(0)
colors = PackedColorArray(2, 0.470588, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_vlcci"]
gradient = SubResource("Gradient_lgot7")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0xdc7"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_xt3am")
shader_parameter/emmission_transform = Projection(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
shader_parameter/flags = 40
shader_parameter/tex = SubResource("GradientTexture1D_vlcci")
shader_parameter/color_ramp = SubResource("GradientTexture1D_jippm")
shader_parameter/curve = SubResource("CurveTexture_vxgg4")

[sub_resource type="QuadMesh" id="QuadMesh_8g0kd"]
material = SubResource("ShaderMaterial_0xdc7")

[sub_resource type="Gradient" id="Gradient_6dfss"]
offsets = PackedFloat32Array(0, 0.907193)
colors = PackedColorArray(1, 1, 1, 1, 1, 0, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_04mix"]
gradient = SubResource("Gradient_6dfss")

[sub_resource type="Curve" id="Curve_cuoyk"]
_data = [Vector2(0, 1), 0.0, -1.18082, 0, 0, Vector2(1, 0.0129609), -0.943115, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_40aiw"]
width = 32
curve = SubResource("Curve_cuoyk")

[node name="AxrangArcSlash" type="Node3D"]

[node name="Arc" parent="." instance=ExtResource("1_ko5fr")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1.24191)

[node name="FrontTrail" type="GPUParticles3D" parent="."]
transform = Transform3D(-4.37114e-08, -1, 3.48787e-16, 1, -4.37114e-08, -3.48787e-16, 3.48787e-16, 3.48787e-16, 1, 0, 0, 0)
custom_aabb = AABB(-100, -100, -100, 200, 200, 200)
amount = 25
lifetime = 25.0
explosiveness = 1.0
fixed_fps = 0
process_material = SubResource("ShaderMaterial_xhio8")
draw_pass_1 = SubResource("QuadMesh_8g0kd")
script = ExtResource("5_hpq5l")
length = 25
color_ramp = SubResource("GradientTexture1D_04mix")
curve = SubResource("CurveTexture_40aiw")
_defaults_have_been_set = true
