[gd_scene load_steps=14 format=3 uid="uid://d14mq7afv37xd"]

[ext_resource type="Script" path="res://enemies/square_particle.gd" id="1_f83y5"]
[ext_resource type="Script" path="res://GPUTrail-main/GPUTrail3D.gd" id="2_8bm15"]
[ext_resource type="Texture2D" uid="uid://ct31fhxvcragr" path="res://GPUTrail-main/defaults/curve.tres" id="3_rqfqs"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_n40ht"]
shading_mode = 0
albedo_color = Color(2, 0.54, 0, 1)
billboard_mode = 3
billboard_keep_scale = true
particles_anim_h_frames = 1
particles_anim_v_frames = 1
particles_anim_loop = false

[sub_resource type="QuadMesh" id="QuadMesh_ntvx4"]
material = SubResource("StandardMaterial3D_n40ht")
size = Vector2(0.6, 0.6)

[sub_resource type="Shader" id="Shader_fjoe2"]
code = "shader_type particles;

render_mode keep_data,disable_force,disable_velocity;



void process() {
	// CUSTOM.w tracks the particles place in the trail, in range (0..LIFETIME]
	// requires that LIFETIME = number of particles
	const float amount = LIFETIME;
	
	vec4 a = EMISSION_TRANSFORM * vec4(0,1,0,1);
	vec4 b = EMISSION_TRANSFORM * vec4(0,-1,0,1);
	
	// start
	if(CUSTOM.w == 0.0){
		CUSTOM.w = float(INDEX)+1.0;
		
		// needed to pass to draw pass
		CUSTOM.z = amount;
		
		// needed to initialize in case of CUSTOM.w == 2.0
		TRANSFORM = mat4(a,a,b,b);
	}
	
	// restart
	if(CUSTOM.w == amount+1.0){
		CUSTOM.w = 1.0;
	}
	
	if(CUSTOM.w == 1.0){
		// sets the quad to the line to cache this frame, it is not yet visible
		TRANSFORM = mat4(a,a,b,b);
	}
	
	if(CUSTOM.w == 2.0){
		// sets the right edge of the quad
		TRANSFORM[1] = a;
		TRANSFORM[2] = b;
	}

	CUSTOM.w++;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_2luk6"]
shader = SubResource("Shader_fjoe2")

[sub_resource type="Shader" id="Shader_q1rkj"]
code = "shader_type spatial;

render_mode unshaded,world_vertex_coords,cull_disabled;

uniform sampler2D tex : repeat_disable, source_color, hint_default_white;
uniform sampler2D color_ramp : repeat_disable, source_color, hint_default_white;
uniform sampler2D curve : repeat_disable, hint_default_white;
uniform mat4 emmission_transform = mat4(1);
uniform int flags = 0;
/*uniform bool vertical_texture = false;
uniform bool use_red_as_alpha = false;
uniform bool billboard = false;
uniform bool dewiggle = false;
uniform bool snap_to_transform = false;*/

#define vertical_texture  bool(flags & 1)
#define use_red_as_alpha  bool(flags & 2)
#define billboard		  bool(flags & 4)
#define dewiggle 		  bool(flags & 8)
#define snap_to_transform bool(flags & 16)
#define clip_overlaps bool(flags & 32)


varying float scale_interp;
varying vec2 clip;
varying vec2 mesh_uv;
void vertex(){
	mesh_uv = UV;
	
	mat4 my_model_matrix = MODEL_MATRIX;
	if(snap_to_transform && INSTANCE_CUSTOM.w==2.0){
		my_model_matrix[1] = emmission_transform * vec4(0,1,0,1);
		my_model_matrix[2] = emmission_transform * vec4(0,-1,0,1);
	}
	
	if(billboard){
		vec3 t0 = my_model_matrix[0].xyz-my_model_matrix[3].xyz;
		vec3 t1 = my_model_matrix[1].xyz-my_model_matrix[2].xyz;
		
		//vec3 up1 = up0;
		vec3 up0 = length(t0)*normalize(
			cross(
				my_model_matrix[3].xyz-INV_VIEW_MATRIX[3].xyz,
				//-INV_VIEW_MATRIX[2].xyz,
				t0));
		vec3 up1 = length(t1)*normalize(
			cross(
				my_model_matrix[2].xyz-INV_VIEW_MATRIX[3].xyz,
				//-INV_VIEW_MATRIX[2].xyz,
				t1));
		
		my_model_matrix[0] = my_model_matrix[3];
		my_model_matrix[1] = my_model_matrix[2];
		
		my_model_matrix[0].xyz += up0;
		my_model_matrix[3].xyz -= up0;
		
		my_model_matrix[1].xyz += up1;
		my_model_matrix[2].xyz -= up1;
	}
	
	vec3 a = mix(my_model_matrix[1].xyz,my_model_matrix[0].xyz,UV.x);
	vec3 b = mix(my_model_matrix[2].xyz,my_model_matrix[3].xyz,UV.x);

	UV.x = (UV.x + INSTANCE_CUSTOM.w-1.0 - 2.0)/(INSTANCE_CUSTOM.z-1.0);

	
	float h = textureLod(curve, vec2(UV.x), 0.0).x;//h=1.0;
	
	VERTEX = mix(a,b,(UV.y-0.5)*h + 0.5);

	if(dewiggle){
		scale_interp = h;
		UV *= scale_interp;
	}
	
		
	clip.x = dot(VERTEX - INV_VIEW_MATRIX[3].xyz,cross(my_model_matrix[1].xyz - INV_VIEW_MATRIX[3].xyz,my_model_matrix[2].xyz - INV_VIEW_MATRIX[3].xyz));
	clip.y = dot(VERTEX - INV_VIEW_MATRIX[3].xyz,cross(my_model_matrix[3].xyz - INV_VIEW_MATRIX[3].xyz,my_model_matrix[0].xyz - INV_VIEW_MATRIX[3].xyz));
}

void fragment(){
	//if(billboard && !FRONT_FACING) discard;
	
	vec2 clip0 = clip;
	float ababab = clip0.x*clip0.y;
	//ababab += dFdx(ababab) + dFdy(ababab);
	//clip0 -= fwidth(clip0);
	if(clip_overlaps && ababab < 0.0) { 
		
		
		
		if(abs(mesh_uv.x-0.5)<0.5)
			discard;
	}
	
	vec2 base_uv = UV;

	if(dewiggle){
		base_uv /= scale_interp;
	}
	
	vec2 raw_uv = base_uv;

	if(vertical_texture){
		base_uv = base_uv.yx;
	}
	
	vec4 T = textureLod(tex, base_uv, 0.0);
	ALBEDO = T.rgb;
	ALPHA = T.a;
	
	if(use_red_as_alpha){
		ALBEDO = vec3(1);
		ALPHA = T.r;
	}
	
	T = textureLod(color_ramp, raw_uv, 0.0);
	ALBEDO *= T.rgb;
	ALPHA *= T.a;
	
	//ALBEDO = vec3(UV,0);
	
	if((base_uv.x < .01) || (.99 < base_uv.x)){
		//ALBEDO = vec3(1,0,1);
	}
}"

[sub_resource type="Gradient" id="Gradient_ps55b"]
offsets = PackedFloat32Array(0)
colors = PackedColorArray(1, 0.411765, 0, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_dagh5"]
gradient = SubResource("Gradient_ps55b")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5stvq"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_q1rkj")
shader_parameter/emmission_transform = Projection(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
shader_parameter/flags = 40
shader_parameter/color_ramp = SubResource("GradientTexture1D_dagh5")
shader_parameter/curve = ExtResource("3_rqfqs")

[sub_resource type="QuadMesh" id="QuadMesh_snup0"]
material = SubResource("ShaderMaterial_5stvq")

[sub_resource type="SphereShape3D" id="SphereShape3D_clqd3"]

[node name="SquareParticle" type="RigidBody3D"]
gravity_scale = 2.66454e-15
linear_velocity = Vector3(2.08165e-12, 2.08165e-12, 2.08165e-12)
angular_velocity = Vector3(0.0261799, 3.63316e-14, 3.63316e-14)
script = ExtResource("1_f83y5")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
cast_shadow = 0
mesh = SubResource("QuadMesh_ntvx4")

[node name="GPUTrail3D" type="GPUParticles3D" parent="."]
transform = Transform3D(0.3, 0, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0)
cast_shadow = 0
custom_aabb = AABB(-1000, -1000, -1000, 2000, 2000, 2000)
amount = 15
lifetime = 15.0
explosiveness = 1.0
fixed_fps = 0
process_material = SubResource("ShaderMaterial_2luk6")
draw_pass_1 = SubResource("QuadMesh_snup0")
script = ExtResource("2_8bm15")
length = 15
color_ramp = SubResource("GradientTexture1D_dagh5")
curve = ExtResource("3_rqfqs")
_defaults_have_been_set = true

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("SphereShape3D_clqd3")
disabled = true
